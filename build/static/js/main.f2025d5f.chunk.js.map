{"version":3,"sources":["components/Nav.js","components/Wrapper.js","components/Main.js","components/SearchBox.js","components/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["styles","nav","backgroundColor","borderBottom","header","fontSize","color","textAlign","margin","headerInfo","marginTop","marginBottom","Navbar","style","className","Wrapper","props","Main","fluid","searchBox","width","display","SearchBox","value","search","onChange","handleInputChange","name","list","type","placeholder","id","DataTable","class","scope","App","Nav","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MAEMA,G,KAAS,CACXC,IAAK,CACDC,gBAAiB,UACjBC,aAAc,iBAElBC,OAAQ,CACJC,SAAU,OACVC,MAAO,QACPC,UAAW,SACXC,OAAQ,QAEZC,WAAY,CACRJ,SAAU,OACVC,MAAO,QACPI,UAAW,MACXC,aAAc,UAcPC,MAVX,WACI,OACI,yBAAKC,MAAOb,EAAOC,IAAKa,UAAU,gCAC9B,yBAAKD,MAAOb,EAAOI,QAAnB,qBACA,yBAAKS,MAAOb,EAAOS,YAAnB,0FCnBDM,MAJf,SAAiBC,GACb,OAAO,wCAAMF,UAAU,WAAcE,KCG1BC,MAJf,SAAcD,GACV,OAAO,uCAAKF,UAAS,mBAAcE,EAAME,MAAQ,SAAW,KAAUF,KCDpEhB,EAAS,CACXmB,UAAW,CACPC,MAAO,QACPZ,OAAQ,OACRa,QAAS,QACTX,UAAW,SAqBJY,MAjBf,SAAmBN,GACf,OACI,6BACI,2BAAOH,MAAOb,EAAOmB,UACjBI,MAAOP,EAAMQ,OACbC,SAAUT,EAAMU,kBAChBC,KAAK,SACLC,KAAK,YACLC,KAAK,OACLf,UAAU,eACVgB,YAAY,SACZC,GAAG,aCmBJC,MAvCf,WACI,OACI,2BAAOnB,MAAO,CAAEH,UAAW,OAAQH,UAAW,UAAY0B,MAAM,uBAC5D,+BACI,4BACI,wBAAIC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGR,+BACI,4BACI,iCACA,0CACA,8CACA,gDACA,2CAEJ,4BACI,iCACA,wCACA,8CACA,4CACA,2CAEJ,4BACI,iCACA,+CACA,8CACA,oDACA,8CCZLC,MAff,WACE,OACE,6BACE,kBAACC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UCFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f2025d5f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n    nav: {\n        backgroundColor: \"#101d41\",\n        borderBottom: \"red 5px solid\"\n    },\n    header: {\n        fontSize: \"32px\",\n        color: \"white\",\n        textAlign: \"center\",\n        margin: \"10px\",\n    },\n    headerInfo: {\n        fontSize: \"12px\",\n        color: \"white\",\n        marginTop: \"5px\",\n        marginBottom: \"30px\"\n    }\n}\n\n    function Navbar() {\n        return (\n            <nav style={styles.nav} className=\"nav navbar-nav navbar-center\">\n                <div style={styles.header}>Employee Directory\n                <div style={styles.headerInfo}>Click on carrots to filter by heading or use the search box to narrow your results.</div>\n                </div>\n            </nav>\n        );\n}\n\nexport default Navbar;","import React from \"react\";\n\nfunction Wrapper(props) {\n    return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;","import React from \"react\";\n\nfunction Main(props) {\n    return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Main;\n","import React from \"react\";\n\nconst styles = {\n    searchBox: {\n        width: \"200px\",\n        margin: \"auto\",\n        display: \"block\",\n        marginTop: \"30px\"\n    }\n}\n\nfunction SearchBox(props) {\n    return (\n        <div>\n            <input style={styles.searchBox}\n                value={props.search}\n                onChange={props.handleInputChange}\n                name=\"search\"\n                list=\"employees\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search\"\n                id=\"search\"\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from \"react\";\n\nfunction DataTable() {\n    return (\n        <table style={{ marginTop: \"30px\", textAlign: \"center\" }} class=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">Image</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Phone</th>\n                    <th scope=\"col\">Email</th>\n                    <th scope=\"col\">DOB</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>1</td>\n                    <td>John Smith</td>\n                    <td>(111)-111-1111</td>\n                    <td>jsmith@gmail.com</td>\n                    <td>07-24-1956</td>\n                </tr>\n                <tr>\n                    <td>2</td>\n                    <td>Jane Doe</td>\n                    <td>(222)-222-2222</td>\n                    <td>jdoe@aol.com</td>\n                    <td>09-27-1975</td>\n                </tr>\n                <tr>\n                    <td>3</td>\n                    <td>Richard Johnson</td>\n                    <td>(333)-333-3333</td>\n                    <td>rjohnson@hotmail.com</td>\n                    <td>10-24-1989</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nexport default DataTable;","import React from \"react\";\nimport Navbar from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Main from \"./components/Main\";\nimport SearchBox from \"./components/SearchBox\";\nimport DataTable from \"./components/DataTable\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Wrapper>\n        <Main>\n          <SearchBox></SearchBox>\n          <DataTable>\n          </DataTable>\n        </Main>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}